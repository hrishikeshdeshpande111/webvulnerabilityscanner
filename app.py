from flask import Flask, render_template, request
import requests
from bs4 import BeautifulSoup
from tqdm import tqdm


app = Flask(__name__)


@app.route('/')
def home():
    return render_template('index.html')


@app.route('/scan', methods=['POST'])
def scan():
    target_url = request.form['url']

    try:
        # Send a GET request to the target URL and receive the response
        response = requests.get(target_url)
        response.raise_for_status()  # Raise an exception for any HTTP errors

        # Parse the HTML code of the response
        soup = BeautifulSoup(response.text, "html.parser")

        # Find all input fields in the HTML code
        input_fields = soup.find_all("input")

        # Define a dictionary to store the vulnerabilities detected
        vulnerabilities = {}

        # Check for XSS vulnerabilities by injecting malicious JavaScript code
        progress_bar = tqdm(input_fields, unit='field', ncols=80, bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt}')
        for input_field in progress_bar:
            payload = "<script>alert('XSS');</script>"
            input_field["value"] = payload
            # Resend the modified request and check if the code is executed
            modified_response = requests.get(target_url, params={input_field["name"]: input_field["value"]})
            modified_response.raise_for_status()  # Raise an exception for any HTTP errors
            if payload in modified_response.text:
                vulnerabilities.setdefault("XSS", []).append(f"Input field '{input_field['name']}' is vulnerable to XSS")

        # Check for SQL injection vulnerabilities by injecting SQL commands
        for input_field in tqdm(input_fields, unit='field', ncols=80, bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt}'):
            payload = "'; DROP TABLE users;"
            input_field["value"] = payload
            # Resend the modified request and check if the command is executed
            modified_response = requests.get(target_url, params={input_field["name"]: input_field["value"]})
            modified_response.raise_for_status()  # Raise an exception for any HTTP errors
            if "error" in modified_response.text:
                vulnerabilities.setdefault("SQL injection", []).append(f"Input field '{input_field['name']}' is vulnerable to SQL injection")

        # Close the progress bar
        progress_bar.close()

        # Render the results template with the vulnerabilities detected
        return render_template('results.html', url=target_url, vulnerabilities=vulnerabilities)

    except requests.exceptions.RequestException as e:
        return render_template('error.html', error=str(e))

    except Exception as e:
        return render_template('error.html', error="An error occurred: " + str(e))


if __name__ == '__main__':
    app.run()
